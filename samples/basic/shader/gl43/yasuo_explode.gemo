#version 430 core
#pragma STDGL invariant(all)
layout(triangles) in;
layout(triangle_strip, max_vertices=3) out;



in VS_OUT{
    vec4 vv4colour;
    vec2 v_v2TexCoord;
    }gs_in[];

out GS_OUT{
    vec4 gv4colour;
    vec2 g_v2TexCoord;
}gs_out;

layout(location = 10) uniform float time;

vec4 explode(vec4 position, vec3 normal){
    float magnitude = 2.0;
    vec3 direction = normal * ((sin(time) + 1.0) / 2.0) * magnitude;
    return position + vec4(direction, 0.0);
}

vec3 GetNormal(){
    vec3 a = vec3(gl_in[0].gl_Position) - vec3(gl_in[1].gl_Position);
    vec3 b = vec3(gl_in[2].gl_Position) - vec3(gl_in[1].gl_Position);
    return normalize(cross(a, b));
}

void main(){
    vec3 normal = GetNormal();

    gl_Position = explode(gl_in[0].gl_Position, normal);
    gs_out.g_v2TexCoord = gs_in[0].v_v2TexCoord;
    gs_out.gv4colour = gs_in[0].vv4colour;
    EmitVertex();
    gl_Position = explode(gl_in[1].gl_Position, normal);
    gs_out.g_v2TexCoord = gs_in[1].v_v2TexCoord;
    gs_out.gv4colour = gs_in[1].vv4colour;
    EmitVertex();
    gl_Position = explode(gl_in[2].gl_Position, normal);
    gs_out.g_v2TexCoord = gs_in[2].v_v2TexCoord;
    gs_out.gv4colour = gs_in[2].vv4colour;
    EmitVertex();
    EndPrimitive();
}