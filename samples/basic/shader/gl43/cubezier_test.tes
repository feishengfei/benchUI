#version 430 core

layout(isolines, fractional_even_spacing, cw) in;

//layout(location = 0) uniform mat4 proj_matrix;
//
//out TES_OUT {
//   vec3 N;
//}tes_out;

vec4 quad_bezier(vec4 A, vec4 B, vec4 C, float t){
    vec4 D = mix(A, B, t);
    vec4 E = mix(B, C, t);
    return mix(D, E, t);
}

vec4 cube_bezier(vec4 A, vec4 B, vec4 C, vec4 D, float t){
    vec4 E = mix(A, B, t);
    vec4 F = mix(B, C, t);
    vec4 G = mix(C, D, t);
    return quad_bezier(E, F, G, t);
}

vec4 cube_bezier3(vec4 A, vec4 B, vec4 C, vec4 D, vec4 E, float t){
    vec4 I = mix(A, B, t);
    vec4 J = mix(B, C, t);
    vec4 K = mix(C, D, t);
    vec4 L = mix(D, E, t);
    return cube_bezier(I, J, K, L, t);
}

vec4 cube_bezier2(vec4 A, vec4 B, vec4 C, vec4 D, vec4 E, vec4 F, float t){
    vec4 I = mix(A, B, t);
    vec4 J = mix(B, C, t);
    vec4 K = mix(C, D, t);
    vec4 L = mix(D, E, t);
    vec4 M = mix(E, F, t);
    return cube_bezier3(I, J, K, L, M, t);
}

vec4 cube_bezier1(vec4 A, vec4 B, vec4 C, vec4 D, vec4 E, vec4 F, vec4 G, float t){
    vec4 I = mix(A, B, t);
    vec4 J = mix(B, C, t);
    vec4 K = mix(C, D, t);
    vec4 L = mix(D, E, t);
    vec4 M = mix(E, F, t);
    vec4 N = mix(F, G, t);
    return cube_bezier2(I, J, K, L, M, N, t);
}

vec4 cube_bezier0(vec4 A, vec4 B, vec4 C, vec4 D, vec4 E, vec4 F, vec4 G, vec4 H, float t){
    vec4 I = mix(A, B, t);
    vec4 J = mix(B, C, t);
    vec4 K = mix(C, D, t);
    vec4 L = mix(D, E, t);
    vec4 M = mix(E, F, t);
    vec4 N = mix(F, G, t);
    vec4 O = mix(G, H, t);
    return cube_bezier1(I, J, K, L, M, N, O, t);
}

vec4 evaluate_patch(vec2 at){
    vec4 P[8];
    int i;
    for(i = 0; i < 8; i++){
    P[i] = cube_bezier(gl_in[i + 0].gl_Position, gl_in[i + 8].gl_Position,
                       gl_in[i + 16].gl_Position, gl_in[i + 24].gl_Position, at.y);
    }
    return cube_bezier0(P[0], P[1], P[2], P[3], P[4], P[5], P[6], P[7], at.x);
}

void main(){
	vec4 p1 = evaluate_patch(gl_TessCoord.xy);

	gl_Position =  p1;
}




